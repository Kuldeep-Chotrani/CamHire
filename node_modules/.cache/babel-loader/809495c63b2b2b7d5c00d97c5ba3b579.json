{"ast":null,"code":"import React from 'react';\nimport classNames from 'classnames';\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nvar usePagination = function usePagination(_ref) {\n  var currentPage = _ref.currentPage,\n      setCurrentPage = _ref.setCurrentPage,\n      _ref$truncableText = _ref.truncableText,\n      truncableText = _ref$truncableText === void 0 ? \"...\" : _ref$truncableText,\n      _ref$truncableClassNa = _ref.truncableClassName,\n      truncableClassName = _ref$truncableClassNa === void 0 ? \"\" : _ref$truncableClassNa,\n      totalPages = _ref.totalPages,\n      _ref$edgePageCount = _ref.edgePageCount,\n      edgePageCount = _ref$edgePageCount === void 0 ? 2 : _ref$edgePageCount,\n      _ref$middlePagesSibli = _ref.middlePagesSiblingCount,\n      middlePagesSiblingCount = _ref$middlePagesSibli === void 0 ? 1 : _ref$middlePagesSibli;\n  var pages = Array(totalPages).fill(0).map(function (_, i) {\n    return i + 1;\n  });\n  var hasPreviousPage = currentPage > 1;\n  var hasNextPage = currentPage < totalPages;\n  var isReachedToFirst = currentPage <= middlePagesSiblingCount;\n  var isReachedToLast = currentPage + middlePagesSiblingCount >= totalPages;\n  var middlePages = React.useMemo(function () {\n    var middlePageCount = middlePagesSiblingCount * 2 + 1;\n\n    if (isReachedToFirst) {\n      return pages.slice(0, middlePageCount);\n    }\n\n    if (isReachedToLast) {\n      return pages.slice(-middlePageCount);\n    }\n\n    return pages.slice(currentPage - middlePagesSiblingCount, currentPage + middlePagesSiblingCount + 1);\n  }, [currentPage, pages]);\n\n  var getAllPreviousPages = function getAllPreviousPages() {\n    return pages.slice(0, middlePages[0] - 1);\n  };\n\n  var previousPages = React.useMemo(function () {\n    if (isReachedToFirst) {\n      return [];\n    }\n\n    if (getAllPreviousPages().length < 1) {\n      return [];\n    }\n\n    return pages.slice(0, edgePageCount).filter(function (p) {\n      return !middlePages.includes(p);\n    });\n  }, [currentPage, pages]);\n  var getAllNextPages = React.useMemo(function () {\n    return pages.slice(middlePages[middlePages.length - 1], pages[pages.length]);\n  }, [pages, middlePages]);\n  var nextPages = React.useMemo(function () {\n    if (isReachedToLast) {\n      return [];\n    }\n\n    if (getAllNextPages.length < 1) {\n      return [];\n    }\n\n    return pages.slice(pages.length - edgePageCount, pages.length).filter(function (p) {\n      return !middlePages.includes(p);\n    });\n  }, [middlePages, pages]);\n  var isPreviousTruncable = React.useMemo(function () {\n    // Is truncable if first value of middlePage is larger than last value of previousPages\n    return middlePages[0] > previousPages[previousPages.length - 1] + 1;\n  }, [previousPages, middlePages]);\n  var isNextTruncable = React.useMemo(function () {\n    // Is truncable if last value of middlePage is larger than first value of previousPages\n    return middlePages[middlePages.length - 1] + 1 < nextPages[0];\n  }, [nextPages, middlePages]);\n  return {\n    currentPage: currentPage,\n    setCurrentPage: setCurrentPage,\n    truncableText: truncableText,\n    truncableClassName: truncableClassName,\n    pages: pages,\n    hasPreviousPage: hasPreviousPage,\n    hasNextPage: hasNextPage,\n    previousPages: previousPages,\n    isPreviousTruncable: isPreviousTruncable,\n    middlePages: middlePages,\n    isNextTruncable: isNextTruncable,\n    nextPages: nextPages\n  };\n};\n\nvar PrevButton = function PrevButton(_ref) {\n  var className = _ref.className,\n      children = _ref.children,\n      buttonProps = _objectWithoutPropertiesLoose(_ref, [\"className\", \"children\"]);\n\n  var pagination = React.useContext(PaginationContext);\n\n  var previous = function previous() {\n    if (pagination.currentPage + 1 > 1) {\n      pagination.setCurrentPage(pagination.currentPage - 1);\n    }\n  };\n\n  return React.createElement(\"button\", Object.assign({\n    className: className\n  }, buttonProps, {\n    onClick: function onClick() {\n      return previous();\n    },\n    disabled: pagination.currentPage === 0\n  }), children);\n};\n\nvar NextButton = function NextButton(_ref2) {\n  var className = _ref2.className,\n      children = _ref2.children,\n      buttonProps = _objectWithoutPropertiesLoose(_ref2, [\"className\", \"children\"]);\n\n  var pagination = React.useContext(PaginationContext);\n\n  var next = function next() {\n    if (pagination.currentPage + 1 < pagination.pages.length) {\n      pagination.setCurrentPage(pagination.currentPage + 1);\n    }\n  };\n\n  return React.createElement(\"button\", Object.assign({\n    className: className\n  }, buttonProps, {\n    onClick: function onClick() {\n      return next();\n    },\n    disabled: pagination.currentPage === pagination.pages.length - 1\n  }), children);\n};\n\nvar TruncableElement = function TruncableElement(_ref3) {\n  var prev = _ref3.prev;\n  var pagination = React.useContext(PaginationContext);\n  var isPreviousTruncable = pagination.isPreviousTruncable,\n      isNextTruncable = pagination.isNextTruncable,\n      _pagination$truncable = pagination.truncableText,\n      truncableText = _pagination$truncable === void 0 ? \"...\" : _pagination$truncable,\n      _pagination$truncable2 = pagination.truncableClassName,\n      truncableClassName = _pagination$truncable2 === void 0 ? \"\" : _pagination$truncable2;\n  return isPreviousTruncable && prev === true || isNextTruncable && !prev ? React.createElement(\"span\", {\n    className: truncableClassName\n  }, truncableText) : null;\n};\n\nvar PageButton = function PageButton(_ref4) {\n  var className = _ref4.className,\n      _ref4$activeClassName = _ref4.activeClassName,\n      activeClassName = _ref4$activeClassName === void 0 ? \"\" : _ref4$activeClassName,\n      _ref4$inactiveClassNa = _ref4.inactiveClassName,\n      inactiveClassName = _ref4$inactiveClassNa === void 0 ? \"\" : _ref4$inactiveClassNa;\n  var pagination = React.useContext(PaginationContext);\n\n  var renderPageButton = function renderPageButton(page) {\n    var _classNames;\n\n    return React.createElement(\"span\", {\n      key: page,\n      className: classNames(className, (_classNames = {}, _classNames[activeClassName] = pagination.currentPage + 1 === page, _classNames[inactiveClassName] = pagination.currentPage + 1 !== page, _classNames)),\n      onClick: function onClick() {\n        return pagination.setCurrentPage(page - 1);\n      }\n    }, page);\n  };\n\n  return React.createElement(React.Fragment, null, pagination.previousPages.map(renderPageButton), React.createElement(TruncableElement, {\n    prev: true\n  }), pagination.middlePages.map(renderPageButton), React.createElement(TruncableElement, null), pagination.nextPages.map(renderPageButton));\n};\n\nvar defaultState = {\n  currentPage: 0,\n  setCurrentPage: function setCurrentPage() {},\n  truncableText: \"...\",\n  truncableClassName: \"\",\n  pages: [],\n  hasPreviousPage: false,\n  hasNextPage: false,\n  previousPages: [],\n  isPreviousTruncable: false,\n  middlePages: [],\n  isNextTruncable: false,\n  nextPages: []\n};\nvar PaginationContext = /*#__PURE__*/React.createContext(defaultState);\n\nvar Pagination = function Pagination(paginationProps) {\n  var pagination = usePagination(paginationProps);\n  return React.createElement(PaginationContext.Provider, {\n    value: pagination\n  }, React.createElement(\"div\", {\n    className: paginationProps.className\n  }, paginationProps.children));\n};\n\nPagination.PrevButton = PrevButton;\nPagination.NextButton = NextButton;\nPagination.PageButton = PageButton;\nexport { NextButton, PageButton, Pagination, PrevButton, TruncableElement };","map":{"version":3,"sources":["../src/hooks/usePagination.tsx","../src/Pagination.tsx"],"names":["usePagination","currentPage","setCurrentPage","truncableText","truncableClassName","totalPages","edgePageCount","middlePagesSiblingCount","pages","i","hasPreviousPage","hasNextPage","isReachedToFirst","isReachedToLast","middlePages","middlePageCount","getAllPreviousPages","previousPages","getAllNextPages","nextPages","isPreviousTruncable","isNextTruncable","PrevButton","className","children","buttonProps","pagination","React","previous","onClick","disabled","NextButton","next","TruncableElement","prev","PageButton","activeClassName","inactiveClassName","renderPageButton","key","page","classNames","defaultState","PaginationContext","Pagination","value","paginationProps"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { IPaginationProps, IUsePagination } from \"../Pagination.d\";\r\n\r\nconst usePagination = ({\r\n  currentPage,\r\n  setCurrentPage,\r\n  truncableText = \"...\",\r\n  truncableClassName = \"\",\r\n  totalPages,\r\n  edgePageCount = 2,\r\n  middlePagesSiblingCount = 1,\r\n}: IPaginationProps): IUsePagination => {\r\n  const pages = Array(totalPages)\r\n    .fill(0)\r\n    .map((_, i) => i + 1);\r\n\r\n  const hasPreviousPage = currentPage > 1;\r\n  const hasNextPage = currentPage < totalPages;\r\n\r\n  const isReachedToFirst = currentPage <= middlePagesSiblingCount;\r\n  const isReachedToLast = currentPage + middlePagesSiblingCount >= totalPages;\r\n\r\n  const middlePages = React.useMemo(() => {\r\n    const middlePageCount = middlePagesSiblingCount * 2 + 1;\r\n    if (isReachedToFirst) {\r\n      return pages.slice(0, middlePageCount);\r\n    }\r\n    if (isReachedToLast) {\r\n      return pages.slice(-middlePageCount);\r\n    }\r\n    return pages.slice(\r\n      currentPage - middlePagesSiblingCount,\r\n      currentPage + middlePagesSiblingCount + 1,\r\n    );\r\n  }, [currentPage, pages]);\r\n\r\n  const getAllPreviousPages = () => {\r\n    return pages.slice(0, middlePages[0] - 1);\r\n  };\r\n\r\n  const previousPages = React.useMemo(() => {\r\n    if (isReachedToFirst) {\r\n      return [];\r\n    }\r\n    if (getAllPreviousPages().length < 1) {\r\n      return [];\r\n    }\r\n    return pages\r\n      .slice(0, edgePageCount)\r\n      .filter((p) => !middlePages.includes(p));\r\n  }, [currentPage, pages]);\r\n\r\n  const getAllNextPages = React.useMemo(() => {\r\n    return pages.slice(\r\n      middlePages[middlePages.length - 1],\r\n      pages[pages.length],\r\n    );\r\n  }, [pages, middlePages]);\r\n\r\n  const nextPages = React.useMemo(() => {\r\n    if (isReachedToLast) {\r\n      return [];\r\n    }\r\n    if (getAllNextPages.length < 1) {\r\n      return [];\r\n    }\r\n    return pages\r\n      .slice(pages.length - edgePageCount, pages.length)\r\n      .filter((p) => !middlePages.includes(p));\r\n  }, [middlePages, pages]);\r\n\r\n  const isPreviousTruncable = React.useMemo(() => {\r\n    // Is truncable if first value of middlePage is larger than last value of previousPages\r\n    return middlePages[0] > previousPages[previousPages.length - 1] + 1;\r\n  }, [previousPages, middlePages]);\r\n\r\n  const isNextTruncable = React.useMemo(() => {\r\n    // Is truncable if last value of middlePage is larger than first value of previousPages\r\n    return middlePages[middlePages.length - 1] + 1 < nextPages[0];\r\n  }, [nextPages, middlePages]);\r\n\r\n  return {\r\n    currentPage,\r\n    setCurrentPage,\r\n    truncableText,\r\n    truncableClassName,\r\n    pages,\r\n    hasPreviousPage,\r\n    hasNextPage,\r\n    previousPages,\r\n    isPreviousTruncable,\r\n    middlePages,\r\n    isNextTruncable,\r\n    nextPages,\r\n  };\r\n};\r\n\r\nexport default usePagination;\r\n","import React, { FC } from \"react\";\r\nimport classNames from \"classnames\";\r\nimport usePagination from \"./hooks/usePagination\";\r\nimport {\r\n  IPagination,\r\n  IPaginationProps,\r\n  ButtonProps,\r\n  PageButtonProps,\r\n} from \"./Pagination.d\";\r\n\r\nexport const PrevButton: FC<ButtonProps> = ({\r\n  className,\r\n  children,\r\n  ...buttonProps\r\n}) => {\r\n  const pagination: IPagination = React.useContext(PaginationContext);\r\n  const previous = () => {\r\n    if (pagination.currentPage + 1 > 1) {\r\n      pagination.setCurrentPage(pagination.currentPage - 1);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <button\r\n      className={className}\r\n      {...buttonProps}\r\n      onClick={() => previous()}\r\n      disabled={pagination.currentPage === 0}\r\n    >\r\n      {children}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport const NextButton: FC<ButtonProps> = ({\r\n  className,\r\n  children,\r\n  ...buttonProps\r\n}) => {\r\n  const pagination: IPagination = React.useContext(PaginationContext);\r\n  const next = () => {\r\n    if (pagination.currentPage + 1 < pagination.pages.length) {\r\n      pagination.setCurrentPage(pagination.currentPage + 1);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <button\r\n      className={className}\r\n      {...buttonProps}\r\n      onClick={() => next()}\r\n      disabled={pagination.currentPage === pagination.pages.length - 1}\r\n    >\r\n      {children}\r\n    </button>\r\n  );\r\n};\r\n\r\ninterface ITruncableElementProps {\r\n  prev?: boolean;\r\n}\r\n\r\nexport const TruncableElement: FC<ITruncableElementProps> = ({ prev }) => {\r\n  const pagination: IPagination = React.useContext(PaginationContext);\r\n\r\n  const {\r\n    isPreviousTruncable,\r\n    isNextTruncable,\r\n    truncableText = \"...\",\r\n    truncableClassName = \"\",\r\n  } = pagination;\r\n\r\n  return (isPreviousTruncable && prev === true) ||\r\n    (isNextTruncable && !prev) ? (\r\n    <span className={truncableClassName}>{truncableText}</span>\r\n  ) : null;\r\n};\r\n\r\nexport const PageButton: FC<PageButtonProps> = ({\r\n  className,\r\n  activeClassName = \"\",\r\n  inactiveClassName = \"\",\r\n}) => {\r\n  const pagination: IPagination = React.useContext(PaginationContext);\r\n\r\n  const renderPageButton = (page: number) => (\r\n    <span\r\n      key={page}\r\n      className={classNames(className, {\r\n        [activeClassName]: pagination.currentPage + 1 === page,\r\n        [inactiveClassName]: pagination.currentPage + 1 !== page,\r\n      })}\r\n      onClick={() => pagination.setCurrentPage(page - 1)}\r\n    >\r\n      {page}\r\n    </span>\r\n  );\r\n\r\n  return (\r\n    <>\r\n      {pagination.previousPages.map(renderPageButton)}\r\n      <TruncableElement prev />\r\n      {pagination.middlePages.map(renderPageButton)}\r\n      <TruncableElement />\r\n      {pagination.nextPages.map(renderPageButton)}\r\n    </>\r\n  );\r\n};\r\n\r\nconst defaultState: IPagination = {\r\n  currentPage: 0,\r\n  setCurrentPage: () => {},\r\n  truncableText: \"...\",\r\n  truncableClassName: \"\",\r\n  pages: [],\r\n  hasPreviousPage: false,\r\n  hasNextPage: false,\r\n  previousPages: [],\r\n  isPreviousTruncable: false,\r\n  middlePages: [],\r\n  isNextTruncable: false,\r\n  nextPages: [],\r\n};\r\n\r\nconst PaginationContext: React.Context<IPagination> =\r\n  React.createContext(defaultState);\r\n\r\nexport const Pagination = (paginationProps: IPaginationProps) => {\r\n  const pagination = usePagination(paginationProps);\r\n\r\n  return (\r\n    <PaginationContext.Provider value={pagination}>\r\n      <div className={paginationProps.className}>\r\n        {paginationProps.children}\r\n      </div>\r\n    </PaginationContext.Provider>\r\n  );\r\n};\r\n\r\nPagination.PrevButton = PrevButton;\r\nPagination.NextButton = NextButton;\r\nPagination.PageButton = PageButton;\r\n"]},"metadata":{},"sourceType":"module"}